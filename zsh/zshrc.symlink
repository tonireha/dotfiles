# Install oh-my-zsh
# -- Automatic --
# $ curl -L http://install.ohmyz.sh | sh
# or
# $ wget --no-check-certificate http://install.ohmyz.sh -O - | sh
# -- Manual --
# $ git clone git://github.com/robbyrussell/oh-my-zsh.git ~/.oh-my-zsh
# $ ln -s <this file> ~/.zshrc
# link custom themes and plugins in .oh-my-zsh/custom/(plugins|themes)
# $ chsh -s /bin/zsh


# Path to your oh-my-zsh configuration.
ZSH=${HOME}/.oh-my-zsh

# Set name of the theme to load.
# Look in ~/.oh-my-zsh/themes/
# Optionally, if you set this to "random", it'll load a random theme each
# time that oh-my-zsh is loaded.
ZSH_THEME="ys-mod"

# Example aliases
# alias zshconfig="mate ~/.zshrc"
# alias ohmyzsh="mate ~/.oh-my-zsh"

# Set to this to use case-sensitive completion
# CASE_SENSITIVE="true"

# Comment this out to disable bi-weekly auto-update checks
# DISABLE_AUTO_UPDATE="true"

# Uncomment to change how often before auto-updates occur? (in days)
# export UPDATE_ZSH_DAYS=13

# Uncomment following line if you want to disable colors in ls
# DISABLE_LS_COLORS="true"

# Uncomment following line if you want to disable autosetting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment following line if you want to disable command autocorrection
DISABLE_CORRECTION="true"

# Uncomment following line if you want red dots to be displayed while waiting for completion
# COMPLETION_WAITING_DOTS="true"

# Uncomment following line if you want to disable marking untracked files under
# VCS as dirty. This makes repository status check for large repositories much,
# much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"

# Which plugins would you like to load? (plugins can be found in ~/.oh-my-zsh/plugins/*)
# Custom plugins may be added to ~/.oh-my-zsh/custom/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)

if test $(command -v svn); then
	# Only load the svn plugin if we have svn installed
	plugins=(ant colored-man colorize command-not-found cp git jira svn-fast-info-mod screen)
else
	plugins=(ant colored-man colorize command-not-found cp git jira screen)
fi

source "${ZSH}/oh-my-zsh.sh"

if [ -d "${HOME}/opt/android-sdk-linux" ]; then
	export ANDROID_HOME=${HOME}/opt/android-sdk-linux
fi

if test -d "${HOME}/opt/billiant"; then
	export BILLIANT_HOME=${HOME}/opt/billiant
fi

# Customize to your needs...
if test -d "${HOME}/bin" && test ! -z "${PATH##*${HOME}/bin*}"; then 
	export PATH=${PATH}:${HOME}/bin
fi
if test -d "${ANDROID_HOME}/platform-tools" && test ! -z "${PATH##*${ANDROID_HOME}/platform-tools*}"; then
	export PATH=${PATH}:${ANDROID_HOME}/platform-tools
fi
if test -d "${ANDROID_HOME}/tools" && test ! -z "${PATH##*${ANDROID_HOME}/tools*}" ; then
	export PATH=${PATH}:${ANDROID_HOME}/tools
fi

export TIME_STYLE=long-iso
export XMLLINT_INDENT="	"
export HISTCONTROL=ignoredups
export HISTIGNORE="pwd:ls:ls -l:ls -ltr:history -w"
export HISTSIZE=10000
setopt histignorealldups
setopt HIST_IGNORE_ALL_DUPS

if test -e "/run/user/${UID}/gvfs"; then
	export GVFS="/run/user/${UID}/gvfs/"
	export CONFIGCF="${GVFS}/sftp:host=config.local,user=server-config/home/server-config/catalina.base/CoDriver/ClientFiles/0.0.0/"
	export PRODMAINCF="${GVFS}/sftp:host=server.codriver.com,user=server-main/home/server-main/catalina.base/CoDriver/ClientFiles/0.0.0/"
fi

# pacman aliases if pacman is installed
if test "$(command -v pacman)"; then
	# Pacman alias examples
	alias pacupg='sudo pacman -Syu'		# Synchronize with repositories and then upgrade packages that are out of date on the local system.
	alias pacin='sudo pacman -S'		# Install specific package(s) from the repositories
	alias pacins='sudo pacman -U'		# Install specific package not from the repositories but from a file 
	alias pacre='sudo pacman -R'		# Remove the specified package(s), retaining its configuration(s) and required dependencies
	alias pacrem='sudo pacman -Rns'		# Remove the specified package(s), its configuration(s) and unneeded dependencies
	alias pacrep='pacman -Si'		# Display information about a given package in the repositories
	alias pacreps='pacman -Ss'		# Search for package(s) in the repositories
	alias pacloc='pacman -Qi'		# Display information about a given package in the local database
	alias paclocs='pacman -Qs'		# Search for package(s) in the local database
	alias paclo="pacman -Qdt"		# List all packages which are orphaned
	alias pacc="sudo pacman -Scc"		# Clean cache - delete all not currently installed package files
	alias paclf="pacman -Ql"		# List all files installed by a given package
	alias pacexpl="pacman -D --asexp"	# Mark one or more installed packages as explicitly installed 
	alias pacimpl="pacman -D --asdep"	# Mark one or more installed packages as non explicitly installed

	# '[r]emove [o]rphans' - recursively remove ALL orphaned packages
	alias pacro="pacman -Qtdq > /dev/null && sudo pacman -Rns \$(pacman -Qtdq | sed -e ':a;N;$!ba;s/\n/ /g')"

	# Additional pacman alias examples
	alias pacupd='sudo pacman -Sy && sudo abs'         # Update and refresh the local package and ABS databases against repositories
	alias pacinsd='sudo pacman -S --asdeps'            # Install given package(s) as dependencies
	alias pacmir='sudo pacman -Syy'                    # Force refresh of all package lists after updating /etc/pacman.d/mirrorlist
fi

if test -f "${HOME}/Projects/gists/scripts-general/svnvimdiffwrap"; then
	alias vimsvndiff='svn diff --diff-cmd ${HOME}/Projects/gists/scripts-general/svnvimdiffwrap'
fi

if grep -q ID=arch /etc/os-release; then 
	export VISUAL="vim"
fi
# Vi keyboard bindings in zsh
#bindkey -v
#bindkey ‘^R’ history-incremental-search-backward
